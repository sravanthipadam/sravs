1)
/* call by value */
#include<stdio.h>
void swap(int x,int y);
int main()
{
int x=10,y=20;
printf("before swap values %d\t %d\t \n",x ,y);
swap(x,y);
}
void swap(int x,int y)
{
    int temp;
    temp=x;
    x=y;
    y=temp;
    printf("after swap %d\t %d\t \n",x ,y);
	return 0;
}
o/p:
before swap values 10    20                                                                                                   
after swap 20    10    


/* call by reference */
#include<stdio.h>

int main()
{
int x=10,y=20;
printf("before swap values %d\t %d\t \n",x ,y);
swap(&x,&y);
}
void swap(int *x,int *y)
{
    int temp;
    temp=*x;
    *x=*y;
    *y=temp;
    printf("after swap %d\t %d\t \n",*x ,*y);
	return 0;
}

o/p:
before swap values 10    20                                                                                                   
after swap 20    10      


2)#include<stdio.h>
int main()
{
int ar[10],i;
int big=0;
printf("enter 10 numbers");
for(int i=0;i<10;i++)
{
scanf("%d\n ",&ar[i]);
if(ar[i]>big)
big=ar[i];

}
printf("big number is %d \n",big);
return 0;
}
o/p:
enter 10 numbers1                                                                                     
2                                                                                                     
3                                                                                                     
4                                                                                                     
5                                                                                                     
6                                                                                                     
7                                                                                                     
8                                                                                                     
9                                                                                                     
88                                                                                                    
3                                                                                                     
big number is 88    



9)#include<stdio.h>
void  main ()

{

int a[10]={10,20,30,40,50,60,70,80,90,100};

int *p;

p = (int *) malloc(sizeof(int)*10);// Dynamic allocation

*(p+0)=100; 

*(p+1)=200;
*(p+2)=300;
*(p+3)=400;
*(p+4)=500;
*(p+5)=600;
*(p+6)=700;
*(p+7)=800;
*(p+8)=900;
*(p+9)=1000;
printf("%d\n",*(p+0));

printf("%d\n",*(p+1));
printf("%d\n",*(p+2));
printf("%d\n",*(p+3));
printf("%d\n",*(p+4));
printf("%d\n",*(p+5));
printf("%d\n",*(p+6));
printf("%d\n",*(p+7));
printf("%d\n",*(p+8));
printf("%d\n",*(p+9));
 return 0;
}

 o/p:
100                                                                                                   
200                                                                                                   
300                                                                                                   
400                                                                                                   
500                                                                                                   
600                                                                                                   
700                                                                                                   
800                                                                                                   
900                                                                                                   
1000                                                                                                  


6)#include <stdio.h>

#include <stdlib.h>

#include <string.h>

struct stu

{

char name[20];

char id[10];

char phno[10];

};

typedef struct stu student;

int

main ()

{

student c1;

char *pq;

strcpy(c1.phno,"7876787878");

strcpy(c1.id,"123");

strcpy(c1.name,"padam");

printf("%s\n",c1.name);

printf("%s\n",c1.id);

printf("%s\n",c1.phno);

//////////Dynamic allocation

customer *pc1;

pc1 = (student *) malloc(sizeof(student));

strcpy(pc1->phno,"9666410087");

strcpy(pc1->id,"123");

strcpy(pc1->name,"padam");

printf("%s\n",pc1->name);

printf("%s\n",pc1->id);

printf("%s\n",pc1->phno);

return 0;

}

padam                                                                                                
1234                                                                                                  
7876787878                                                                                            
padam                                                                                                
1235                                                                                                  
9666410087
             

5)	element search		 

#include <stdio.h>
int main()
{ 
    int s,flag=0;
    int *p;
    p=(int *) malloc(sizeof(int)*10);
    printf("Enter the elements of array\n");
    for(int i=0;i<10;i++)
    scanf("%d",&p[i]);
    printf("Enter the element to be searched\n");
    scanf("%d",&s);
    for(int i=0;i<10;i++)
    if(s==p[i])
    {
        flag=1;
        break;
    }
    if(flag==1)
    printf("The element is found\n");
    else
    printf("The element is not found\n");
    return 0;
}
Enter the elements of array                                                                           
1                                                                                                     
3                                                                                                     
2                                                                                                     
56                                                                                                    
45                                                                                                    
34                                                                                                    
67                                                                                                    
56                                                                                                    
87                                                                                                    
98                                                                                                    
Enter the element to be searched                                                                      
56                                                                                                    
The element is found                                                                                  

static demo

  #include <stdio.h>
int i=0,x=0;
int staticdemo()
{
    static int a=4;
    a=a+4;
    return a;
}    
int main()
{
for(i=0;i<4;i++)
{
    
    printf("%d ", staticdemo()); 
}
}
o/p: 4 8 16 20

scope
#include <stdio.h>
int g;
int main () 
{
  int a, b;
  a = 10;
  b = 20;
  g = a + b;
  printf ("value of a = %d, b = %d and g = %d\n", a, b, g);
  return 0;
}

value of a=10 ,b=20,c=30

3 emp create details


#include <stdio.h>

#include <string.h>

struct emp 

{

char id[10];

char name[20];

char salary [30];

};

int main()

{

struct emp employees[3]; 

printf("Enter 3 employee records id , name and salary \n");

for (int i = 0; i < 3; i++) 
{
printf("\nEnter Employee detail \n");
printf("Emp Id :-\t");
scanf("%s",employees[i].id);
printf("\nEmp Name :-\t");
scanf("%s",employees[i].name);
printf("\nEmp salary :-\t");
scanf("%s",employees[i].salary);
    
}

for (int i = 0; i < 3; i++) {

printf("The Employee id is %s\n",employees[i].id);

printf("The Employee name is %s\n",employees[i].name);

printf("The Employee salarys is %s\n",employees[i].salary);
}

return 0;
}
                                                                       
  
4) emp update,delete
#include <stdio.h>

#include <string.h>

struct emp 

{

char id[10];

char name[20];

char salary [30];

};

int main()

{
char sid[10],sname[30],deleit[20];
int flag=0,sindex=0,i=0;
struct emp employees[3]; 

printf("Enter 3 employee records id , name and salary \n");

for (int i = 0; i < 3; i++) 
    {
        printf("\nEnter Employee detail \n");
        printf("Emp Id :-\t");
        scanf("%s",employees[i].id);
        printf("\nEmp Name :-\t");
        scanf("%s",employees[i].name);
        printf("\nEmp salary :-\t");
        scanf("%s",employees[i].salary);
    
    }

for (int i = 0; i < 3; i++) 
    {

        printf("The Employee id is %s\n",employees[i].id);
        
        printf("The Employee name is %s\n",employees[i].name);
        
        printf("The Employee salarys is %s\n",employees[i].salary);
    }

printf("Enter employe id to update \n");

scanf("%s",sid);

for (int i = 0; i < 3; i++) 
{

if(strcmp(sid,employees[i].id) == 0)

    {

        flag=1; sindex = i;
        
        printf("Enter new id to update ");
        
        scanf("%s",sid);
        printf("Enter new name to update ");
        scanf("%s",sname);
        
        strcpy(employees[i].id,sid);
        
        strcpy(employees[i].name,sname);
        
        break;
        
    }

}
if(flag==1)

{

printf("Employee updated \n");

}

else
{
printf("Employee with id %s not found \n",sid);
}
/*int n=3;
printf("Enter the id where you wish to delete element\n");
scanf("%s", deleit);
if (deleit >= n)
      printf("Deletion not possible.\n");
   else
   {
      for (i = position - 1; i < n - 1; i++)
         employees[i] = employees[i+1];

      printf("after Deletion:\n");

      for (i = 0; i < n - 1; i++)
         printf("%d\n", employees[i]);
   }
   */
/*printf("Enter employe id to delete \n");

scanf("%s",sid);
for (int i = 0; i < 3; i++) 
{

if(strcmp(sid,employees[i].id) == 0)

    {
        for (i = sid - 1; i < n - 1; i++)
         employees[i] = employees[i+1];

      printf("Resultant array:\n");

      for (i = 0; i < i - 1; i++)
         printf("%d\n", employees[i]]);
    }   */  
printf("Deleted succesfully");

return 0;
} 